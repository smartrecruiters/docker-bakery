package service

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

const (
	originalImage   = "jdk-14"
	targetImageCopy = "jdk-15"
	rootPath        = "/tmp/dockers"
)

var dependenciesUsed = map[string][]*DockerImage{
	"jdk-14": {
		&DockerImage{
			Name:             "jdk-14-child-a",
			DockerfileDir:    rootPath + "/base/jdk-14-child-a",
			DockerfilePath:   rootPath + "/base/jdk-14-child-a/Dockerfile.template",
			DependsOnLong:    "{{.DEFAULT_PULL_REGISTRY}}/jdk-14:{{.JDK_14_VERSION}}",
			DependsOnShort:   "jdk-14",
			DependsOnVersion: "{{.JDK_14_VERSION}}",
		},
		&DockerImage{
			Name:             "jdk-14-child-b",
			DockerfileDir:    rootPath + "/base-B/jdk-14-child-b",
			DockerfilePath:   rootPath + "/base-B/jdk-14-child-b/Dockerfile.template",
			DependsOnLong:    "{{.DEFAULT_PULL_REGISTRY}}/jdk-14:{{.JDK_14_VERSION}}",
			DependsOnShort:   "jdk-14",
			DependsOnVersion: "{{.JDK_14_VERSION}}",
		},
	},
	"jdk-14-child-a": {
		&DockerImage{
			Name:             "jdk-14-child-aa",
			DockerfileDir:    rootPath + "/base/jdk-14-child-aa",
			DockerfilePath:   rootPath + "/base/jdk-14-child-aa/Dockerfile.template",
			DependsOnLong:    "{{.DEFAULT_PULL_REGISTRY}}/jdk-14-child-a:{{.JDK_14_CHILD_A_VERSION}}",
			DependsOnShort:   "jdk-14-child-a",
			DependsOnVersion: "{{.JDK_14_CHILD_A_VERSION}}",
		},
	},
	"jdk-14-child-b": {
		&DockerImage{
			Name:             "jdk-14-child-bb",
			DockerfileDir:    rootPath + "/base/jdk-14-child-bb",
			DockerfilePath:   rootPath + "/base/jdk-14-child-bb/Dockerfile.template",
			DependsOnLong:    "{{.DEFAULT_PULL_REGISTRY}}/jdk-14-child-b:{{.JDK_14_CHILD_B_VERSION}}",
			DependsOnShort:   "jdk-14-child-b",
			DependsOnVersion: "{{.JDK_14_CHILD_B_VERSION}}",
		},
	}}

func TestShouldPrepareAutogeneratedUpdatesForChildProjectNonRecursive(t *testing.T) {
	// when
	toGenerate, err := getChildrenToUpdate(originalImage, dependenciesUsed, singleNameReplacer("jdk-14", "jdk-15"), false)

	// then
	assert.NoError(t, err)
	assert.Len(t, toGenerate, 2)

}

func TestEmptyListWhenNoChildImages(t *testing.T) {
	// given
	dependencies := map[string][]*DockerImage{"something": {
		&DockerImage{},
	}}

	// when
	toGenerate, err := getChildrenToUpdate(originalImage, dependencies, singleNameReplacer("jdk-14", "jdk-15"), false)

	// then
	assert.NoError(t, err)
	assert.Equal(t, 0, len(toGenerate))
}

func TestShouldPrepareAutogeneratedUpdatesForChildProjectsRecursively(t *testing.T) {
	// given
	expected := []imageToGenerate{
		{
			childOriginImageName: "jdk-14-child-a",
			childOriginDirectory: "/tmp/dockers/base/jdk-14-child-a",
			newImageDirectory:    "/tmp/dockers/base/jdk-15-child-a",
			originalParentImage:  "jdk-14",
			newParentImage:       "jdk-15",
		},
		{
			childOriginImageName: "jdk-14-child-b",
			childOriginDirectory: "/tmp/dockers/base-B/jdk-14-child-b",
			newImageDirectory:    "/tmp/dockers/base-B/jdk-15-child-b",
			originalParentImage:  "jdk-14",
			newParentImage:       "jdk-15",
		},
		{
			childOriginImageName: "jdk-14-child-aa",
			childOriginDirectory: "/tmp/dockers/base/jdk-14-child-aa",
			newImageDirectory:    "/tmp/dockers/base/jdk-15-child-aa",
			originalParentImage:  "jdk-14-child-a",
			newParentImage:       "jdk-15-child-a",
		},
		{
			childOriginImageName: "jdk-14-child-bb",
			childOriginDirectory: "/tmp/dockers/base/jdk-14-child-bb",
			newImageDirectory:    "/tmp/dockers/base/jdk-15-child-bb",
			originalParentImage:  "jdk-14-child-b",
			newParentImage:       "jdk-15-child-b",
		},
	}
	// when
	toGenerate, err := getChildrenToUpdate(originalImage, dependenciesUsed, singleNameReplacer("jdk-14", "jdk-15"), true)

	// then
	assert.NoError(t, err)
	assert.Len(t, toGenerate, 4)
	assert.ElementsMatch(t, toGenerate, expected)
}

func singleNameReplacer(from, to string) nameReplacer {
	return newNameReplacer().add(from, to)
}
